problem with type ActionError: mismatched types between subschemas; this is often due to enums with different data payloads and can be resolved using serde adjacent tagging.
this schema's type
String(
    StringType {
        format: Empty,
        pattern: None,
        enumeration: [
            Some(
                "InjectedError",
            ),
        ],
        min_length: None,
        max_length: None,
    },
)
differs from this
Object(
    ObjectType {
        properties: {
            "ActionFailed": Item(
                Schema {
                    schema_data: SchemaData {
                        nullable: false,
                        read_only: false,
                        write_only: false,
                        deprecated: false,
                        external_docs: None,
                        example: None,
                        title: None,
                        description: None,
                        discriminator: None,
                        default: None,
                        extensions: {},
                    },
                    schema_kind: Type(
                        Object(
                            ObjectType {
                                properties: {
                                    "source_error": Item(
                                        Schema {
                                            schema_data: SchemaData {
                                                nullable: false,
                                                read_only: false,
                                                write_only: false,
                                                deprecated: false,
                                                external_docs: None,
                                                example: None,
                                                title: None,
                                                description: None,
                                                discriminator: None,
                                                default: None,
                                                extensions: {},
                                            },
                                            schema_kind: Any(
                                                AnySchema {
                                                    typ: None,
                                                    pattern: None,
                                                    multiple_of: None,
                                                    exclusive_minimum: None,
                                                    exclusive_maximum: None,
                                                    minimum: None,
                                                    maximum: None,
                                                    properties: {},
                                                    required: [],
                                                    additional_properties: None,
                                                    min_properties: None,
                                                    max_properties: None,
                                                    items: None,
                                                    min_items: None,
                                                    max_items: None,
                                                    unique_items: None,
                                                    enumeration: [],
                                                    format: None,
                                                    min_length: None,
                                                    max_length: None,
                                                    one_of: [],
                                                    all_of: [],
                                                    any_of: [],
                                                    not: None,
                                                },
                                            ),
                                        },
                                    ),
                                },
                                required: [
                                    "source_error",
                                ],
                                additional_properties: None,
                                min_properties: None,
                                max_properties: None,
                            },
                        ),
                    ),
                },
            ),
        },
        required: [
            "ActionFailed",
        ],
        additional_properties: Some(
            Any(
                false,
            ),
        ),
        min_properties: None,
        max_properties: None,
    },
)

For more info, see https://github.com/oxidecomputer/openapi-lint#type-mismatch

problem with type DiskState: mismatched types between subschemas; this is often due to enums with different data payloads and can be resolved using serde adjacent tagging.
this schema's type
String(
    StringType {
        format: Empty,
        pattern: None,
        enumeration: [
            Some(
                "creating",
            ),
            Some(
                "detached",
            ),
            Some(
                "destroyed",
            ),
            Some(
                "faulted",
            ),
        ],
        min_length: None,
        max_length: None,
    },
)
differs from this
Object(
    ObjectType {
        properties: {
            "attaching": Item(
                Schema {
                    schema_data: SchemaData {
                        nullable: false,
                        read_only: false,
                        write_only: false,
                        deprecated: false,
                        external_docs: None,
                        example: None,
                        title: None,
                        description: None,
                        discriminator: None,
                        default: None,
                        extensions: {},
                    },
                    schema_kind: Type(
                        String(
                            StringType {
                                format: Unknown(
                                    "uuid",
                                ),
                                pattern: None,
                                enumeration: [],
                                min_length: None,
                                max_length: None,
                            },
                        ),
                    ),
                },
            ),
        },
        required: [
            "attaching",
        ],
        additional_properties: Some(
            Any(
                false,
            ),
        ),
        min_properties: None,
        max_properties: None,
    },
)

For more info, see https://github.com/oxidecomputer/openapi-lint#type-mismatch

an object contains a property 'next_page' which is not camelCase:
Schema {
    schema_data: SchemaData {
        nullable: false,
        read_only: false,
        write_only: false,
        deprecated: false,
        external_docs: None,
        example: None,
        title: None,
        description: Some(
            "A single page of results",
        ),
        discriminator: None,
        default: None,
        extensions: {},
    },
    schema_kind: Type(
        Object(
            ObjectType {
                properties: {
                    "items": Item(
                        Schema {
                            schema_data: SchemaData {
                                nullable: false,
                                read_only: false,
                                write_only: false,
                                deprecated: false,
                                external_docs: None,
                                example: None,
                                title: None,
                                description: Some(
                                    "list of items on this page of results",
                                ),
                                discriminator: None,
                                default: None,
                                extensions: {},
                            },
                            schema_kind: Type(
                                Array(
                                    ArrayType {
                                        items: Some(
                                            Reference {
                                                reference: "#/components/schemas/DiskView",
                                            },
                                        ),
                                        min_items: None,
                                        max_items: None,
                                        unique_items: false,
                                    },
                                ),
                            ),
                        },
                    ),
                    "next_page": Item(
                        Schema {
                            schema_data: SchemaData {
                                nullable: false,
                                read_only: false,
                                write_only: false,
                                deprecated: false,
                                external_docs: None,
                                example: None,
                                title: None,
                                description: Some(
                                    "token used to fetch the next page of results (if any)",
                                ),
                                discriminator: None,
                                default: None,
                                extensions: {},
                            },
                            schema_kind: Type(
                                String(
                                    StringType {
                                        format: Empty,
                                        pattern: None,
                                        enumeration: [],
                                        min_length: None,
                                        max_length: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                required: [
                    "items",
                ],
                additional_properties: None,
                min_properties: None,
                max_properties: None,
            },
        ),
    ),
}
Add #[serde(rename = "nextPage")] to the member or #[serde(rename_all = "camelCase" to the object
For more info see https://github.com/oxidecomputer/openapi-lint#naming

an object contains a property 'next_page' which is not camelCase:
Schema {
    schema_data: SchemaData {
        nullable: false,
        read_only: false,
        write_only: false,
        deprecated: false,
        external_docs: None,
        example: None,
        title: None,
        description: Some(
            "A single page of results",
        ),
        discriminator: None,
        default: None,
        extensions: {},
    },
    schema_kind: Type(
        Object(
            ObjectType {
                properties: {
                    "items": Item(
                        Schema {
                            schema_data: SchemaData {
                                nullable: false,
                                read_only: false,
                                write_only: false,
                                deprecated: false,
                                external_docs: None,
                                example: None,
                                title: None,
                                description: Some(
                                    "list of items on this page of results",
                                ),
                                discriminator: None,
                                default: None,
                                extensions: {},
                            },
                            schema_kind: Type(
                                Array(
                                    ArrayType {
                                        items: Some(
                                            Reference {
                                                reference: "#/components/schemas/InstanceView",
                                            },
                                        ),
                                        min_items: None,
                                        max_items: None,
                                        unique_items: false,
                                    },
                                ),
                            ),
                        },
                    ),
                    "next_page": Item(
                        Schema {
                            schema_data: SchemaData {
                                nullable: false,
                                read_only: false,
                                write_only: false,
                                deprecated: false,
                                external_docs: None,
                                example: None,
                                title: None,
                                description: Some(
                                    "token used to fetch the next page of results (if any)",
                                ),
                                discriminator: None,
                                default: None,
                                extensions: {},
                            },
                            schema_kind: Type(
                                String(
                                    StringType {
                                        format: Empty,
                                        pattern: None,
                                        enumeration: [],
                                        min_length: None,
                                        max_length: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                required: [
                    "items",
                ],
                additional_properties: None,
                min_properties: None,
                max_properties: None,
            },
        ),
    ),
}
Add #[serde(rename = "nextPage")] to the member or #[serde(rename_all = "camelCase" to the object
For more info see https://github.com/oxidecomputer/openapi-lint#naming

an object contains a property 'next_page' which is not camelCase:
Schema {
    schema_data: SchemaData {
        nullable: false,
        read_only: false,
        write_only: false,
        deprecated: false,
        external_docs: None,
        example: None,
        title: None,
        description: Some(
            "A single page of results",
        ),
        discriminator: None,
        default: None,
        extensions: {},
    },
    schema_kind: Type(
        Object(
            ObjectType {
                properties: {
                    "items": Item(
                        Schema {
                            schema_data: SchemaData {
                                nullable: false,
                                read_only: false,
                                write_only: false,
                                deprecated: false,
                                external_docs: None,
                                example: None,
                                title: None,
                                description: Some(
                                    "list of items on this page of results",
                                ),
                                discriminator: None,
                                default: None,
                                extensions: {},
                            },
                            schema_kind: Type(
                                Array(
                                    ArrayType {
                                        items: Some(
                                            Reference {
                                                reference: "#/components/schemas/ProjectView",
                                            },
                                        ),
                                        min_items: None,
                                        max_items: None,
                                        unique_items: false,
                                    },
                                ),
                            ),
                        },
                    ),
                    "next_page": Item(
                        Schema {
                            schema_data: SchemaData {
                                nullable: false,
                                read_only: false,
                                write_only: false,
                                deprecated: false,
                                external_docs: None,
                                example: None,
                                title: None,
                                description: Some(
                                    "token used to fetch the next page of results (if any)",
                                ),
                                discriminator: None,
                                default: None,
                                extensions: {},
                            },
                            schema_kind: Type(
                                String(
                                    StringType {
                                        format: Empty,
                                        pattern: None,
                                        enumeration: [],
                                        min_length: None,
                                        max_length: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                required: [
                    "items",
                ],
                additional_properties: None,
                min_properties: None,
                max_properties: None,
            },
        ),
    ),
}
Add #[serde(rename = "nextPage")] to the member or #[serde(rename_all = "camelCase" to the object
For more info see https://github.com/oxidecomputer/openapi-lint#naming

an object contains a property 'next_page' which is not camelCase:
Schema {
    schema_data: SchemaData {
        nullable: false,
        read_only: false,
        write_only: false,
        deprecated: false,
        external_docs: None,
        example: None,
        title: None,
        description: Some(
            "A single page of results",
        ),
        discriminator: None,
        default: None,
        extensions: {},
    },
    schema_kind: Type(
        Object(
            ObjectType {
                properties: {
                    "items": Item(
                        Schema {
                            schema_data: SchemaData {
                                nullable: false,
                                read_only: false,
                                write_only: false,
                                deprecated: false,
                                external_docs: None,
                                example: None,
                                title: None,
                                description: Some(
                                    "list of items on this page of results",
                                ),
                                discriminator: None,
                                default: None,
                                extensions: {},
                            },
                            schema_kind: Type(
                                Array(
                                    ArrayType {
                                        items: Some(
                                            Reference {
                                                reference: "#/components/schemas/RackView",
                                            },
                                        ),
                                        min_items: None,
                                        max_items: None,
                                        unique_items: false,
                                    },
                                ),
                            ),
                        },
                    ),
                    "next_page": Item(
                        Schema {
                            schema_data: SchemaData {
                                nullable: false,
                                read_only: false,
                                write_only: false,
                                deprecated: false,
                                external_docs: None,
                                example: None,
                                title: None,
                                description: Some(
                                    "token used to fetch the next page of results (if any)",
                                ),
                                discriminator: None,
                                default: None,
                                extensions: {},
                            },
                            schema_kind: Type(
                                String(
                                    StringType {
                                        format: Empty,
                                        pattern: None,
                                        enumeration: [],
                                        min_length: None,
                                        max_length: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                required: [
                    "items",
                ],
                additional_properties: None,
                min_properties: None,
                max_properties: None,
            },
        ),
    ),
}
Add #[serde(rename = "nextPage")] to the member or #[serde(rename_all = "camelCase" to the object
For more info see https://github.com/oxidecomputer/openapi-lint#naming

problem with type SagaStateView: mismatched types between subschemas; this is often due to enums with different data payloads and can be resolved using serde adjacent tagging.
this schema's type
String(
    StringType {
        format: Empty,
        pattern: None,
        enumeration: [
            Some(
                "running",
            ),
        ],
        min_length: None,
        max_length: None,
    },
)
differs from this
Object(
    ObjectType {
        properties: {
            "done": Item(
                Schema {
                    schema_data: SchemaData {
                        nullable: false,
                        read_only: false,
                        write_only: false,
                        deprecated: false,
                        external_docs: None,
                        example: None,
                        title: None,
                        description: None,
                        discriminator: None,
                        default: None,
                        extensions: {},
                    },
                    schema_kind: Type(
                        Object(
                            ObjectType {
                                properties: {
                                    "errorInfo": Reference {
                                        reference: "#/components/schemas/ActionError",
                                    },
                                    "errorNodeName": Item(
                                        Schema {
                                            schema_data: SchemaData {
                                                nullable: false,
                                                read_only: false,
                                                write_only: false,
                                                deprecated: false,
                                                external_docs: None,
                                                example: None,
                                                title: None,
                                                description: None,
                                                discriminator: None,
                                                default: None,
                                                extensions: {},
                                            },
                                            schema_kind: Type(
                                                String(
                                                    StringType {
                                                        format: Empty,
                                                        pattern: None,
                                                        enumeration: [],
                                                        min_length: None,
                                                        max_length: None,
                                                    },
                                                ),
                                            ),
                                        },
                                    ),
                                    "failed": Item(
                                        Schema {
                                            schema_data: SchemaData {
                                                nullable: false,
                                                read_only: false,
                                                write_only: false,
                                                deprecated: false,
                                                external_docs: None,
                                                example: None,
                                                title: None,
                                                description: None,
                                                discriminator: None,
                                                default: None,
                                                extensions: {},
                                            },
                                            schema_kind: Type(
                                                Boolean,
                                            ),
                                        },
                                    ),
                                },
                                required: [
                                    "failed",
                                ],
                                additional_properties: None,
                                min_properties: None,
                                max_properties: None,
                            },
                        ),
                    ),
                },
            ),
        },
        required: [
            "done",
        ],
        additional_properties: Some(
            Any(
                false,
            ),
        ),
        min_properties: None,
        max_properties: None,
    },
)

For more info, see https://github.com/oxidecomputer/openapi-lint#type-mismatch

an object contains a property 'next_page' which is not camelCase:
Schema {
    schema_data: SchemaData {
        nullable: false,
        read_only: false,
        write_only: false,
        deprecated: false,
        external_docs: None,
        example: None,
        title: None,
        description: Some(
            "A single page of results",
        ),
        discriminator: None,
        default: None,
        extensions: {},
    },
    schema_kind: Type(
        Object(
            ObjectType {
                properties: {
                    "items": Item(
                        Schema {
                            schema_data: SchemaData {
                                nullable: false,
                                read_only: false,
                                write_only: false,
                                deprecated: false,
                                external_docs: None,
                                example: None,
                                title: None,
                                description: Some(
                                    "list of items on this page of results",
                                ),
                                discriminator: None,
                                default: None,
                                extensions: {},
                            },
                            schema_kind: Type(
                                Array(
                                    ArrayType {
                                        items: Some(
                                            Reference {
                                                reference: "#/components/schemas/SagaView",
                                            },
                                        ),
                                        min_items: None,
                                        max_items: None,
                                        unique_items: false,
                                    },
                                ),
                            ),
                        },
                    ),
                    "next_page": Item(
                        Schema {
                            schema_data: SchemaData {
                                nullable: false,
                                read_only: false,
                                write_only: false,
                                deprecated: false,
                                external_docs: None,
                                example: None,
                                title: None,
                                description: Some(
                                    "token used to fetch the next page of results (if any)",
                                ),
                                discriminator: None,
                                default: None,
                                extensions: {},
                            },
                            schema_kind: Type(
                                String(
                                    StringType {
                                        format: Empty,
                                        pattern: None,
                                        enumeration: [],
                                        min_length: None,
                                        max_length: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                required: [
                    "items",
                ],
                additional_properties: None,
                min_properties: None,
                max_properties: None,
            },
        ),
    ),
}
Add #[serde(rename = "nextPage")] to the member or #[serde(rename_all = "camelCase" to the object
For more info see https://github.com/oxidecomputer/openapi-lint#naming

an object contains a property 'next_page' which is not camelCase:
Schema {
    schema_data: SchemaData {
        nullable: false,
        read_only: false,
        write_only: false,
        deprecated: false,
        external_docs: None,
        example: None,
        title: None,
        description: Some(
            "A single page of results",
        ),
        discriminator: None,
        default: None,
        extensions: {},
    },
    schema_kind: Type(
        Object(
            ObjectType {
                properties: {
                    "items": Item(
                        Schema {
                            schema_data: SchemaData {
                                nullable: false,
                                read_only: false,
                                write_only: false,
                                deprecated: false,
                                external_docs: None,
                                example: None,
                                title: None,
                                description: Some(
                                    "list of items on this page of results",
                                ),
                                discriminator: None,
                                default: None,
                                extensions: {},
                            },
                            schema_kind: Type(
                                Array(
                                    ArrayType {
                                        items: Some(
                                            Reference {
                                                reference: "#/components/schemas/SledView",
                                            },
                                        ),
                                        min_items: None,
                                        max_items: None,
                                        unique_items: false,
                                    },
                                ),
                            ),
                        },
                    ),
                    "next_page": Item(
                        Schema {
                            schema_data: SchemaData {
                                nullable: false,
                                read_only: false,
                                write_only: false,
                                deprecated: false,
                                external_docs: None,
                                example: None,
                                title: None,
                                description: Some(
                                    "token used to fetch the next page of results (if any)",
                                ),
                                discriminator: None,
                                default: None,
                                extensions: {},
                            },
                            schema_kind: Type(
                                String(
                                    StringType {
                                        format: Empty,
                                        pattern: None,
                                        enumeration: [],
                                        min_length: None,
                                        max_length: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                required: [
                    "items",
                ],
                additional_properties: None,
                min_properties: None,
                max_properties: None,
            },
        ),
    ),
}
Add #[serde(rename = "nextPage")] to the member or #[serde(rename_all = "camelCase" to the object
For more info see https://github.com/oxidecomputer/openapi-lint#naming

The operation for /projects/{project_name}/instances post is named "projectInstancesPost" which is not snake_case
For more info, see https://github.com/oxidecomputer/openapi-lint#naming

The type "fake_id_sort_mode" has a name that is not PascalCase; to rename it add #[serde(rename = "FakeIdSortMode")]
For more info, see https://github.com/oxidecomputer/openapi-lint#naming